import asyncio
import uvicorn
from fastapi import FastAPI, HTTPException, WebSocket, WebSocketDisconnect
from fastapi.responses import FileResponse, HTMLResponse
from fastapi.staticfiles import StaticFiles
from fastapi.middleware.cors import CORSMiddleware
import json
import os
from typing import Dict, Any
from chat_manager import ChatManager
from config import Config

# ÂàõÂª∫FastAPIÂ∫îÁî®
app = FastAPI(title="Áà±ËéâÂ∏åÈõÖÁöÑÈó∫Êàø", description="‰∏éÁà±ËéâÂ∏åÈõÖ‰∏ÄËµ∑Â∫¶ËøáÁæéÂ•ΩÊó∂ÂÖâÁöÑAIÂØπËØùÁ≥ªÁªü")

# Ê∑ªÂä†CORS‰∏≠Èó¥‰ª∂
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# ÂàõÂª∫ËÅäÂ§©ÁÆ°ÁêÜÂô®ÂÆû‰æã
chat_manager = ChatManager()

# ÊåÇËΩΩÈùôÊÄÅÊñá‰ª∂ÁõÆÂΩï
if os.path.exists("static"):
    app.mount("/static", StaticFiles(directory="static"), name="static")

@app.get("/")
async def root():
    """ËøîÂõû‰∏ªÈ°µHTML"""
    html_content = """
    <!DOCTYPE html>
    <html lang="zh-CN">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Áà±ËéâÂ∏åÈõÖÁöÑÂåñÂ¶ÜÈó¥</title>
        <link href="https://fonts.googleapis.com/css2?family=Noto+Sans+SC:wght@300;400;500;700&display=swap" rel="stylesheet">
        <style>
            * {
                margin: 0;
                padding: 0;
                box-sizing: border-box;
            }
            
            body {
                font-family: 'Noto Sans SC', sans-serif;
                background: linear-gradient(135deg, #ff9a9e 0%, #fecfef 25%, #fecfef 75%, #ff9a9e 100%);
                min-height: 100vh;
                display: flex;
                align-items: center;
                justify-content: center;
                padding: 20px;
            }
            
            .container {
                background: rgba(255, 255, 255, 0.95);
                border-radius: 25px;
                padding: 40px;
                box-shadow: 0 20px 60px rgba(255, 154, 158, 0.3);
                backdrop-filter: blur(10px);
                max-width: 900px;
                width: 100%;
                position: relative;
                overflow: hidden;
            }
            
            .container::before {
                content: '';
                position: absolute;
                top: 0;
                left: 0;
                right: 0;
                height: 5px;
                background: linear-gradient(90deg, #ff9a9e, #fecfef, #ff9a9e);
                border-radius: 25px 25px 0 0;
            }
            
            .header {
                text-align: center;
                margin-bottom: 30px;
                position: relative;
            }
            
            .title {
                font-size: 2.5em;
                font-weight: 700;
                background: linear-gradient(45deg, #ff6b9d, #c44569);
                -webkit-background-clip: text;
                -webkit-text-fill-color: transparent;
                background-clip: text;
                margin-bottom: 10px;
                text-shadow: 0 2px 4px rgba(0,0,0,0.1);
            }
            
            .subtitle {
                color: #666;
                font-size: 1.1em;
                font-weight: 300;
                margin-bottom: 20px;
            }
            
            .chat-container {
                height: 450px;
                border: 2px solid #ffe0e6;
                border-radius: 20px;
                padding: 20px;
                overflow-y: auto;
                margin-bottom: 25px;
                background: linear-gradient(135deg, #fff5f7 0%, #fff 100%);
                box-shadow: inset 0 2px 10px rgba(255, 154, 158, 0.1);
                scrollbar-width: thin;
                scrollbar-color: #ff9a9e #fff5f7;
            }
            
            .chat-container::-webkit-scrollbar {
                width: 8px;
            }
            
            .chat-container::-webkit-scrollbar-track {
                background: #fff5f7;
                border-radius: 4px;
            }
            
            .chat-container::-webkit-scrollbar-thumb {
                background: #ff9a9e;
                border-radius: 4px;
            }
            
            .message {
                margin-bottom: 20px;
                padding: 15px 20px;
                border-radius: 20px;
                max-width: 85%;
                position: relative;
                animation: fadeInUp 0.5s ease-out;
            }
            
            @keyframes fadeInUp {
                from {
                    opacity: 0;
                    transform: translateY(20px);
                }
                to {
                    opacity: 1;
                    transform: translateY(0);
                }
            }
            
            .user-message {
                background: linear-gradient(135deg, #ff6b9d, #c44569);
                color: white;
                margin-left: auto;
                text-align: right;
                box-shadow: 0 4px 15px rgba(255, 107, 157, 0.3);
            }
            
            .ai-message {
                background: linear-gradient(135deg, #fff, #f8f9ff);
                color: #333;
                border: 1px solid #ffe0e6;
                box-shadow: 0 4px 15px rgba(0,0,0,0.05);
            }
            
            .ai-message::before {
                content: 'üå∏';
                position: absolute;
                left: -10px;
                top: 50%;
                transform: translateY(-50%);
                font-size: 1.2em;
            }
            
            .input-container {
                display: flex;
                gap: 15px;
                margin-bottom: 25px;
                align-items: flex-start;
            }
            
            .button-group {
                display: flex;
                flex-direction: column;
                gap: 10px;
            }
            
            input[type="text"] {
                flex: 1;
                padding: 18px 25px;
                border: 2px solid #ffe0e6;
                border-radius: 25px;
                font-size: 16px;
                background: white;
                transition: all 0.3s ease;
                box-shadow: 0 2px 10px rgba(255, 154, 158, 0.1);
            }
            
            input[type="text"]:focus {
                outline: none;
                border-color: #ff6b9d;
                box-shadow: 0 0 0 3px rgba(255, 107, 157, 0.1);
                transform: translateY(-2px);
            }
            
            textarea {
                flex: 1;
                padding: 18px 25px;
                border: 2px solid #ffe0e6;
                border-radius: 25px;
                font-size: 16px;
                background: white;
                transition: all 0.3s ease;
                box-shadow: 0 2px 10px rgba(255, 154, 158, 0.1);
                resize: vertical;
                min-height: 60px;
                max-height: 120px;
                font-family: 'Noto Sans SC', sans-serif;
                line-height: 1.5;
                overflow-y: auto;
            }
            
            textarea:focus {
                outline: none;
                border-color: #ff6b9d;
                box-shadow: 0 0 0 3px rgba(255, 107, 157, 0.1);
                transform: translateY(-2px);
            }
            
            textarea::-webkit-scrollbar {
                width: 6px;
            }
            
            textarea::-webkit-scrollbar-track {
                background: #fff5f7;
                border-radius: 3px;
            }
            
            textarea::-webkit-scrollbar-thumb {
                background: #ff9a9e;
                border-radius: 3px;
            }
            
            .send-btn {
                padding: 18px 30px;
                background: linear-gradient(135deg, #ff6b9d, #c44569);
                color: white;
                border: none;
                border-radius: 25px;
                cursor: pointer;
                font-size: 16px;
                font-weight: 500;
                transition: all 0.3s ease;
                box-shadow: 0 4px 15px rgba(255, 107, 157, 0.3);
                display: flex;
                align-items: center;
                gap: 8px;
            }
            
            .send-btn:hover {
                transform: translateY(-2px);
                box-shadow: 0 6px 20px rgba(255, 107, 157, 0.4);
            }
            
            .send-btn:active {
                transform: translateY(0);
            }
            
            .voice-btn {
                padding: 18px 20px;
                background: linear-gradient(135deg, #4ecdc4, #44a08d);
                color: white;
                border: none;
                border-radius: 25px;
                cursor: pointer;
                font-size: 16px;
                font-weight: 500;
                transition: all 0.3s ease;
                box-shadow: 0 4px 15px rgba(78, 205, 196, 0.3);
                display: flex;
                align-items: center;
                gap: 8px;
            }
            
            .voice-btn:hover {
                transform: translateY(-2px);
                box-shadow: 0 6px 20px rgba(78, 205, 196, 0.4);
            }
            
            .voice-btn:active {
                transform: translateY(0);
            }
            
            .voice-btn.recording {
                background: linear-gradient(135deg, #ff6b6b, #ee5a52);
                animation: pulse 1.5s infinite;
            }
            
            @keyframes pulse {
                0% { transform: scale(1); }
                50% { transform: scale(1.05); }
                100% { transform: scale(1); }
            }
            
            .voice-status {
                position: fixed;
                top: 50%;
                left: 50%;
                transform: translate(-50%, -50%);
                background: rgba(0, 0, 0, 0.8);
                color: white;
                padding: 20px 30px;
                border-radius: 15px;
                font-size: 18px;
                display: none;
                z-index: 1000;
                backdrop-filter: blur(10px);
            }
            
            .controls {
                display: flex;
                gap: 15px;
                justify-content: center;
                flex-wrap: wrap;
            }
            
            .control-btn {
                padding: 12px 24px;
                background: linear-gradient(135deg, #f8f9ff, #fff);
                color: #666;
                border: 2px solid #ffe0e6;
                border-radius: 20px;
                cursor: pointer;
                font-size: 14px;
                font-weight: 500;
                transition: all 0.3s ease;
                box-shadow: 0 2px 10px rgba(0,0,0,0.05);
            }
            
            .control-btn:hover {
                background: linear-gradient(135deg, #ff6b9d, #c44569);
                color: white;
                border-color: #ff6b9d;
                transform: translateY(-2px);
                box-shadow: 0 4px 15px rgba(255, 107, 157, 0.3);
            }
            
            .status {
                text-align: center;
                margin-top: 25px;
                padding: 15px;
                background: linear-gradient(135deg, #fff5f7, #fff);
                border-radius: 15px;
                border: 1px solid #ffe0e6;
                color: #666;
                font-size: 14px;
            }
            
            .audio-controls {
                margin-top: 10px;
                text-align: center;
            }
            
            .audio-btn {
                background: linear-gradient(135deg, #ff6b9d, #c44569);
                color: white;
                border: none;
                border-radius: 15px;
                padding: 8px 16px;
                margin: 5px;
                cursor: pointer;
                font-size: 12px;
                transition: all 0.3s ease;
                box-shadow: 0 2px 10px rgba(255, 107, 157, 0.2);
            }
            
            .audio-btn:hover {
                transform: translateY(-2px);
                box-shadow: 0 4px 15px rgba(255, 107, 157, 0.3);
            }
            
            .audio-btn:active {
                transform: translateY(0);
            }
            
            .loading {
                display: none;
                text-align: center;
                color: #ff6b9d;
                font-style: italic;
                margin: 10px 0;
            }
            
            .typing-indicator {
                display: none;
                padding: 15px 20px;
                background: linear-gradient(135deg, #fff, #f8f9ff);
                border-radius: 20px;
                color: #666;
                font-style: italic;
                margin-bottom: 20px;
                border: 1px solid #ffe0e6;
                max-width: 85%;
                position: relative;
            }
            
            .typing-indicator::before {
                content: 'üå∏';
                position: absolute;
                left: -10px;
                top: 50%;
                transform: translateY(-50%);
                font-size: 1.2em;
            }
            
            .typing-dots {
                display: inline-block;
                animation: typing 1.4s infinite;
            }
            
            @keyframes typing {
                0%, 20% { content: "Ê≠£Âú®ÊÄùËÄÉ"; }
                40% { content: "Ê≠£Âú®ÊÄùËÄÉ."; }
                60% { content: "Ê≠£Âú®ÊÄùËÄÉ.."; }
                80%, 100% { content: "Ê≠£Âú®ÊÄùËÄÉ..."; }
            }
            
            .welcome-message {
                text-align: center;
                color: #666;
                font-style: italic;
                margin-bottom: 20px;
                padding: 20px;
                background: linear-gradient(135deg, #fff5f7, #fff);
                border-radius: 15px;
                border: 1px solid #ffe0e6;
            }
            
            .history-modal {
                display: none;
                position: fixed;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                background: rgba(0, 0, 0, 0.5);
                z-index: 1000;
                backdrop-filter: blur(5px);
            }
            
            .history-content {
                position: absolute;
                top: 50%;
                left: 50%;
                transform: translate(-50%, -50%);
                background: white;
                border-radius: 20px;
                padding: 30px;
                max-width: 600px;
                width: 90%;
                max-height: 80vh;
                overflow-y: auto;
                box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);
            }
            
            .history-header {
                display: flex;
                justify-content: space-between;
                align-items: center;
                margin-bottom: 20px;
                padding-bottom: 15px;
                border-bottom: 2px solid #ffe0e6;
            }
            
            .history-title {
                font-size: 1.5em;
                font-weight: 600;
                color: #ff6b9d;
            }
            
            .close-btn {
                background: none;
                border: none;
                font-size: 1.5em;
                cursor: pointer;
                color: #666;
                padding: 5px;
                border-radius: 50%;
                transition: all 0.3s ease;
            }
            
            .close-btn:hover {
                background: #ffe0e6;
                color: #ff6b9d;
            }
            
            .history-item {
                padding: 15px;
                margin: 10px 0;
                border: 1px solid #ffe0e6;
                border-radius: 15px;
                background: linear-gradient(135deg, #fff5f7, #fff);
                cursor: pointer;
                transition: all 0.3s ease;
            }
            
            .history-item:hover {
                transform: translateY(-2px);
                box-shadow: 0 5px 15px rgba(255, 107, 157, 0.2);
                border-color: #ff6b9d;
            }
            
            .history-date {
                font-weight: 600;
                color: #ff6b9d;
                margin-bottom: 5px;
            }
            
            .history-count {
                color: #666;
                font-size: 0.9em;
            }
            
            .history-actions {
                display: flex;
                gap: 10px;
                margin-top: 10px;
            }
            
            .history-btn {
                padding: 5px 10px;
                border: none;
                border-radius: 10px;
                cursor: pointer;
                font-size: 0.8em;
                transition: all 0.3s ease;
            }
            
            .view-btn {
                background: linear-gradient(135deg, #4ecdc4, #44a08d);
                color: white;
            }
            
            .delete-btn {
                background: linear-gradient(135deg, #ff6b6b, #ee5a52);
                color: white;
            }
            
            .history-btn:hover {
                transform: translateY(-1px);
                box-shadow: 0 3px 10px rgba(0, 0, 0, 0.2);
            }
            
            @media (max-width: 768px) {
                .container {
                    padding: 20px;
                    margin: 10px;
                }
                
                .title {
                    font-size: 2em;
                }
                
                .chat-container {
                    height: 350px;
                }
                
                .controls {
                    flex-direction: column;
                }
            }
        </style>
    </head>
    <body>
        <div class="container">
            <div class="header">
                <h1 class="title">üå∏ Áà±ËéâÂ∏åÈõÖÁöÑÂåñÂ¶ÜÈó¥üå∏</h1>
                <p class="subtitle">‰∏éÁà±ËéâÂ∏åÈõÖ‰∏ÄËµ∑Â∫¶ËøáÁæéÂ•ΩÊó∂ÂÖâ</p>
            </div>
            
            <div class="welcome-message">
                üíï ‰∫≤Áà±ÁöÑÔºåÊ¨¢ËøéÊù•Âà∞ÊàëÁöÑÁßòÂØÜÂü∫Âú∞ÔΩûÊúâ‰ªÄ‰πàÊÉ≥ÂíåÊàëËÅäÁöÑÂêóÔºü
            </div>
            
            <div class="chat-container" id="chatContainer">
                <!-- ÊÄùËÄÉÊåáÁ§∫Âô®Â∞ÜÂú®JavaScript‰∏≠Âä®ÊÄÅÊ∑ªÂä†ÂíåÁßªÈô§ -->
            </div>
            
            <div class="input-container">
                <textarea id="messageInput" placeholder="ÂíåÁà±ËéâÂ∏åÈõÖËØ¥ËØ¥ËØùÂêß..." onkeypress="handleKeyPress(event)"></textarea>
                <div class="button-group">
                    <button class="voice-btn" onclick="toggleVoiceInput()" id="voiceBtn" title="ËØ≠Èü≥ËæìÂÖ•ÔºàÂèØÈÄâÂäüËÉΩÔºâ">
                        üé§ ËØ≠Èü≥
                    </button>
                    <button class="send-btn" onclick="sendMessage()">
                        üíï ÂèëÈÄÅ
                    </button>
                </div>
            </div>
            
            <div class="controls">
                <button class="control-btn" onclick="clearHistory()">üóëÔ∏è Ê∏ÖÁ©∫ÂéÜÂè≤</button>
                <button class="control-btn" onclick="showHistory()">üìö ÂéÜÂè≤ËÆ∞ÂΩï</button>
                <button class="control-btn" onclick="checkStatus()">üîç Ê£ÄÊü•Áä∂ÊÄÅ</button>
                <button class="control-btn" onclick="toggleAudio()">üîä Èü≥È¢ëÂºÄÂÖ≥</button>
            </div>
            
            <div class="loading" id="loading">Ê≠£Âú®Á≠âÂæÖÁà±ËéâÂ∏åÈõÖÁöÑÂõûÂ§ç...</div>
            
            <div class="voice-status" id="voiceStatus">
                üé§ Ê≠£Âú®Âê¨‰Ω†ËØ¥ËØù...
            </div>
            
            <div class="status" id="status"></div>
        </div>

        <!-- ÂéÜÂè≤ËÆ∞ÂΩïÂºπÁ™ó -->
        <div class="history-modal" id="historyModal">
            <div class="history-content">
                <div class="history-header">
                    <h2 class="history-title">üìö ËÅäÂ§©ÂéÜÂè≤ËÆ∞ÂΩï</h2>
                    <button class="close-btn" onclick="closeHistory()">&times;</button>
                </div>
                <div id="historyList">
                    <!-- ÂéÜÂè≤ËÆ∞ÂΩïÂàóË°®Â∞ÜÂú®ËøôÈáåÂä®ÊÄÅÁîüÊàê -->
                </div>
            </div>
        </div>

        <script>
            let currentAudio = null;
            let audioEnabled = true;
            let recognition = null;
            let isRecording = false;

            function handleKeyPress(event) {
                if (event.key === 'Enter' && !event.ctrlKey) {
                    event.preventDefault();
                    sendMessage();
                }
            }

            function toggleVoiceInput() {
                console.log('ËØ≠Èü≥ÊåâÈíÆË¢´ÁÇπÂáª');
                addMessage('üé§ ËØ≠Èü≥ÂäüËÉΩÊöÇÊó∂‰∏çÂèØÁî®ÔºåËØ∑‰ΩøÁî®ÊñáÊú¨ËæìÂÖ•', 'ai');
            }

            function toggleAudio() {
                audioEnabled = !audioEnabled;
                const btn = event.target;
                if (audioEnabled) {
                    btn.innerHTML = 'üîä Èü≥È¢ëÂºÄ';
                } else {
                    btn.innerHTML = 'üîá Èü≥È¢ëÂÖ≥';
                }
            }

            async function sendMessage() {
                const input = document.getElementById('messageInput');
                const message = input.value.trim();
                
                if (!message) return;
                
                addMessage(message, 'user');
                input.value = '';
                
                try {
                    const response = await fetch('/chat', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({
                            message: message,
                            generate_audio: audioEnabled
                        })
                    });
                    
                    const result = await response.json();
                    
                    if (result.success) {
                        addMessage(result.text_response, 'ai');
                    } else {
                        addMessage('Êä±Ê≠âÔºåÊàëÈÅáÂà∞‰∫Ü‰∏Ä‰∫õÈóÆÈ¢ò...', 'ai');
                    }
                } catch (error) {
                    addMessage('ÁΩëÁªúËøûÊé•Âá∫Áé∞ÈóÆÈ¢òÔºåËØ∑Á®çÂêéÂÜçËØï...', 'ai');
                }
            }

            function addMessage(text, sender) {
                const container = document.getElementById('chatContainer');
                const messageDiv = document.createElement('div');
                messageDiv.className = `message ${sender}-message`;
                messageDiv.textContent = text;
                container.appendChild(messageDiv);
                container.scrollTop = container.scrollHeight;
            }

            async function clearHistory() {
                try {
                    const response = await fetch('/clear-history', {
                        method: 'POST'
                    });
                    const result = await response.json();
                    
                    if (result.success) {
                        document.getElementById('chatContainer').innerHTML = '';
                        addMessage('ÂØπËØùÂéÜÂè≤Â∑≤Ê∏ÖÁ©∫ÔΩû', 'ai');
                    }
                } catch (error) {
                    addMessage('Ê∏ÖÁ©∫ÂéÜÂè≤Êó∂Âá∫Áé∞ÈóÆÈ¢ò...', 'ai');
                }
            }

            async function checkStatus() {
                try {
                    const response = await fetch('/status');
                    const status = await response.json();
                    
                    let statusText = 'Á≥ªÁªüÁä∂ÊÄÅÔºö';
                    if (status.deepseek_api_key_configured) {
                        statusText += '‚úÖ DeepSeek APIÂ∑≤ÈÖçÁΩÆ ';
                    } else {
                        statusText += '‚ùå DeepSeek APIÊú™ÈÖçÁΩÆ ';
                    }
                    
                    if (status.services_status && status.services_status.tts_model) {
                        statusText += '‚úÖ TTSÊ®°ÂûãÊ≠£Â∏∏ ';
                    } else {
                        statusText += '‚ùå TTSÊ®°ÂûãÂºÇÂ∏∏ ';
                    }
                    
                    document.getElementById('status').textContent = statusText;
                } catch (error) {
                    document.getElementById('status').textContent = 'Êó†Ê≥ïËé∑ÂèñÁ≥ªÁªüÁä∂ÊÄÅ';
                }
            }

            async function showHistory() {
                try {
                    const response = await fetch('/history');
                    const result = await response.json();
                    
                    if (result.success) {
                        displayHistoryList(result.history_files);
                        document.getElementById('historyModal').style.display = 'block';
                    } else {
                        alert('Ëé∑ÂèñÂéÜÂè≤ËÆ∞ÂΩïÂ§±Ë¥•');
                    }
                } catch (error) {
                    alert('Ëé∑ÂèñÂéÜÂè≤ËÆ∞ÂΩïÊó∂Âá∫Áé∞ÈîôËØØ');
                }
            }

            function closeHistory() {
                document.getElementById('historyModal').style.display = 'none';
            }

            function displayHistoryList(historyFiles) {
                const historyList = document.getElementById('historyList');
                
                if (historyFiles.length === 0) {
                    historyList.innerHTML = '<p style="text-align: center; color: #666; padding: 20px;">ÊöÇÊó†ÂéÜÂè≤ËÆ∞ÂΩï</p>';
                    return;
                }
                
                let html = '';
                historyFiles.forEach(file => {
                    const date = file.date;
                    const count = file.message_count;
                    const isToday = date === new Date().toISOString().split('T')[0];
                    
                    html += `
                        <div class="history-item">
                            <div class="history-date">
                                ${date} ${isToday ? '(‰ªäÂ§©)' : ''}
                            </div>
                            <div class="history-count">
                                ${count} Êù°Ê∂àÊÅØ
                            </div>
                            <div class="history-actions">
                                <button class="history-btn view-btn" onclick="viewHistory('${date}')">
                                    üëÅÔ∏è Êü•Áúã
                                </button>
                                <button class="history-btn delete-btn" onclick="deleteHistory('${date}')">
                                    üóëÔ∏è Âà†Èô§
                                </button>
                            </div>
                        </div>
                    `;
                });
                
                historyList.innerHTML = html;
            }

            async function viewHistory(date) {
                try {
                    const response = await fetch(`/history/${date}`);
                    const result = await response.json();
                    
                    if (result.success) {
                        // Ê∏ÖÁ©∫ÂΩìÂâçËÅäÂ§©ËÆ∞ÂΩï
                        document.getElementById('chatContainer').innerHTML = '';
                        
                        // ÊåâÈ°∫Â∫èÊ∑ªÂä†ÂéÜÂè≤Ê∂àÊÅØ
                        for (let i = 0; i < result.messages.length; i += 2) {
                            if (i < result.messages.length) {
                                // Ê∑ªÂä†Áî®Êà∑Ê∂àÊÅØ
                                addMessage(result.messages[i].content, 'user');
                            }
                            if (i + 1 < result.messages.length) {
                                // Ê∑ªÂä†AIÂõûÂ§ç
                                addMessage(result.messages[i + 1].content, 'ai');
                            }
                        }
                        
                        closeHistory();
                        addMessage(`üìö Â∑≤Âä†ËΩΩ ${date} ÁöÑËÅäÂ§©ËÆ∞ÂΩï`, 'ai');
                    } else {
                        alert('Âä†ËΩΩÂéÜÂè≤ËÆ∞ÂΩïÂ§±Ë¥•');
                    }
                } catch (error) {
                    alert('Âä†ËΩΩÂéÜÂè≤ËÆ∞ÂΩïÊó∂Âá∫Áé∞ÈîôËØØ');
                }
            }

            async function deleteHistory(date) {
                if (!confirm(`Á°ÆÂÆöË¶ÅÂà†Èô§ ${date} ÁöÑËÅäÂ§©ËÆ∞ÂΩïÂêóÔºü`)) {
                    return;
                }
                
                try {
                    const response = await fetch(`/history/${date}`, {
                        method: 'DELETE'
                    });
                    const result = await response.json();
                    
                    if (result.success) {
                        // Âà∑Êñ∞ÂéÜÂè≤ËÆ∞ÂΩïÂàóË°®
                        showHistory();
                        addMessage(`üóëÔ∏è Â∑≤Âà†Èô§ ${date} ÁöÑËÅäÂ§©ËÆ∞ÂΩï`, 'ai');
                    } else {
                        alert('Âà†Èô§ÂéÜÂè≤ËÆ∞ÂΩïÂ§±Ë¥•');
                    }
                } catch (error) {
                    alert('Âà†Èô§ÂéÜÂè≤ËÆ∞ÂΩïÊó∂Âá∫Áé∞ÈîôËØØ');
                }
            }

            // È°µÈù¢Âä†ËΩΩÊó∂Ê£ÄÊü•Áä∂ÊÄÅ
            window.onload = function() {
                console.log('È°µÈù¢Âä†ËΩΩÂÆåÊàê');
                addMessage('‚úÖ È°µÈù¢Âä†ËΩΩÂÆåÊàêÔºåÁ≥ªÁªüÊ≠£Â∏∏Â∑•‰Ωú', 'ai');
                checkStatus();
            };
        </script>
    </body>
    </html>
    """
    return HTMLResponse(content=html_content)

@app.post("/chat")
async def chat_endpoint(request: Dict[str, Any]):
    """Â§ÑÁêÜËÅäÂ§©ËØ∑Ê±Ç"""
    message = request.get("message", "")
    if not message:
        raise HTTPException(status_code=400, detail="Ê∂àÊÅØ‰∏çËÉΩ‰∏∫Á©∫")
    
    result = chat_manager.process_message(message)
    return result

@app.post("/clear-history")
async def clear_history():
    """Ê∏ÖÁ©∫ÂØπËØùÂéÜÂè≤"""
    return chat_manager.clear_history()

@app.get("/status")
async def get_status():
    """Ëé∑ÂèñÁ≥ªÁªüÁä∂ÊÄÅ"""
    return chat_manager.get_status()

@app.get("/history")
async def get_history_list():
    """Ëé∑ÂèñÂéÜÂè≤ËÆ∞ÂΩïÂàóË°®"""
    history_files = chat_manager.get_history_files()
    return {
        "success": True,
        "history_files": history_files
    }

@app.get("/history/{date}")
async def get_history_by_date(date: str):
    """Ëé∑ÂèñÊåáÂÆöÊó•ÊúüÁöÑÂéÜÂè≤ËÆ∞ÂΩï"""
    messages = chat_manager.load_history_by_date(date)
    return {
        "success": True,
        "date": date,
        "messages": messages
    }

@app.delete("/history/{date}")
async def delete_history_by_date(date: str):
    """Âà†Èô§ÊåáÂÆöÊó•ÊúüÁöÑÂéÜÂè≤ËÆ∞ÂΩï"""
    success = chat_manager.delete_history_by_date(date)
    return {
        "success": success,
        "message": f"ÂéÜÂè≤ËÆ∞ÂΩïÂà†Èô§{'ÊàêÂäü' if success else 'Â§±Ë¥•'}"
    }

@app.get("/audio/{filename}")
async def get_audio(filename: str):
    """Ëé∑ÂèñÈü≥È¢ëÊñá‰ª∂"""
    audio_path = os.path.join(Config.AUDIO_OUTPUT_PATH, filename)
    if os.path.exists(audio_path):
        return FileResponse(audio_path, media_type="audio/wav")
    else:
        raise HTTPException(status_code=404, detail="Èü≥È¢ëÊñá‰ª∂‰∏çÂ≠òÂú®")

@app.websocket("/ws")
async def websocket_endpoint(websocket: WebSocket):
    """WebSocketÁ´ØÁÇπÔºåÁî®‰∫éÂÆûÊó∂ÂØπËØù"""
    await websocket.accept()
    try:
        while True:
            # Êé•Êî∂Ê∂àÊÅØ
            data = await websocket.receive_text()
            message_data = json.loads(data)
            
            # Â§ÑÁêÜÊ∂àÊÅØ
            result = chat_manager.process_message(message_data.get("message", ""))
            
            # ÂèëÈÄÅÂõûÂ§ç
            await websocket.send_text(json.dumps(result))
            
    except WebSocketDisconnect:
        print("WebSocketËøûÊé•Êñ≠ÂºÄ")
    except Exception as e:
        print(f"WebSocketÈîôËØØ: {e}")

def run_cli():
    """ËøêË°åÂëΩ‰ª§Ë°åÁïåÈù¢"""
    print("ü§ñ AIÂØπËØùÁ≥ªÁªü - ÂëΩ‰ª§Ë°åÊ®°Âºè")
    print("ËæìÂÖ• 'quit' Êàñ 'exit' ÈÄÄÂá∫")
    print("ËæìÂÖ• 'clear' Ê∏ÖÁ©∫ÂØπËØùÂéÜÂè≤")
    print("ËæìÂÖ• 'status' Êü•ÁúãÁ≥ªÁªüÁä∂ÊÄÅ")
    print("-" * 50)
    
    while True:
        try:
            user_input = input("‰Ω†: ").strip()
            
            if user_input.lower() in ['quit', 'exit']:
                print("ÂÜçËßÅÔºÅ")
                break
            elif user_input.lower() == 'clear':
                result = chat_manager.clear_history()
                print(f"Á≥ªÁªü: {result['message']}")
                continue
            elif user_input.lower() == 'status':
                status = chat_manager.get_status()
                print(f"Á≥ªÁªüÁä∂ÊÄÅ: {status}")
                continue
            elif not user_input:
                continue
            
            # Â§ÑÁêÜÁî®Êà∑Ê∂àÊÅØ
            result = chat_manager.process_message(user_input)
            
            if result['success']:
                print(f"AI: {result['text_response']}")
                if result['audio_path']:
                    print(f"Èü≥È¢ëÊñá‰ª∂: {result['audio_path']}")
            else:
                print(f"ÈîôËØØ: {result.get('error', 'Êú™Áü•ÈîôËØØ')}")
                
        except KeyboardInterrupt:
            print("\nÂÜçËßÅÔºÅ")
            break
        except Exception as e:
            print(f"ÂèëÁîüÈîôËØØ: {e}")

if __name__ == "__main__":
    import sys
    
    if len(sys.argv) > 1 and sys.argv[1] == "--cli":
        # ÂëΩ‰ª§Ë°åÊ®°Âºè
        run_cli()
    else:
        # WebÊúçÂä°Âô®Ê®°Âºè
        print(f"üöÄ ÂêØÂä®AIÂØπËØùÁ≥ªÁªüÊúçÂä°Âô®...")
        print(f"üì± WebÁïåÈù¢: http://localhost:8000")
        print(f"üîß APIÊñáÊ°£: http://localhost:8000/docs")
        print(f"üí° ‰ΩøÁî® --cli ÂèÇÊï∞ÂêØÂä®ÂëΩ‰ª§Ë°åÊ®°Âºè")
        print(f"üí° Ê≥®ÊÑèÔºöHTTPÊ®°Âºè‰∏ãÈ∫¶ÂÖãÈ£éÊùÉÈôêÂèØËÉΩÂèóÈôê")
        
        uvicorn.run(
            "main:app",
            host=Config.HOST,
            port=Config.PORT,
            reload=False
        ) 